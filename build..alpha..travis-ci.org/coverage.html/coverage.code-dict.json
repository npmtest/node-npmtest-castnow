{"/home/travis/build/npmtest/node-npmtest-castnow/test.js":"/* istanbul instrument in package npmtest_castnow */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-castnow/lib.npmtest_castnow.js":"/* istanbul instrument in package npmtest_castnow */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_castnow = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_castnow = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-castnow/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-castnow && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_castnow */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_castnow\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_castnow.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_castnow.rollup.js'] =\n            local.assetsDict['/assets.npmtest_castnow.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_castnow.__dirname + '/lib.npmtest_castnow.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/index.js":"#!/usr/bin/env node\n\nvar player = require('chromecast-player')();\nvar opts = require('minimist')(process.argv.slice(2));\nvar chalk = require('chalk');\nvar keypress = require('keypress');\nvar ui = require('playerui')();\nvar circulate = require('array-loop');\nvar xtend = require('xtend');\nvar shuffle = require('array-shuffle');\nvar unformatTime = require('./utils/unformat-time');\nvar debug = require('debug')('castnow');\nvar debouncedSeeker = require('debounced-seeker');\nvar noop = function() {};\n\n// plugins\nvar directories = require('./plugins/directories');\nvar xspf = require('./plugins/xspf');\nvar localfile = require('./plugins/localfile');\nvar torrent = require('./plugins/torrent');\nvar transcode = require('./plugins/transcode');\nvar subtitles = require('./plugins/subtitles');\nvar stdin = require('./plugins/stdin');\n\nif (opts.help) {\n  return console.log([\n    '',\n    'Usage: castnow [<media>, <media>, ...] [OPTIONS]',\n    '',\n    'Option                   Meaning',\n    '--tomp4                  Convert file to mp4 during playback',\n    '--device <name>          The name of the Chromecast device that should be used',\n    '--address <ip>           The IP address or hostname of your Chromecast device',\n    '--subtitles <path/url>   Path or URL to an SRT or VTT file',\n    '--subtitle-scale <scale> Subtitle font scale',\n    '--subtitle-color <color> Subtitle font RGBA color',\n    '--subtitle-port <port>   Specify the port to be used for serving subtitles',\n    '--myip <ip>              Your local IP address',\n    '--quiet                  No output',\n    '--peerflix-* <value>     Pass options to peerflix',\n    '--ffmpeg-* <value>       Pass options to ffmpeg',\n    '--type <type>            Explicitly set the mime-type (e.g. \"video/mp4\")',\n    '--bypass-srt-encoding    Disable automatic UTF-8 encoding of SRT subtitles',\n    '--seek <hh:mm:ss>        Seek to the specified time on start using the format hh:mm:ss or mm:ss',\n    '--loop                   Loop over playlist, or file, forever',\n    '--shuffle                Play in random order',\n    '--recursive              List all files in directories recursively',\n    '--volume-step <step>     Step at which the volume changes. Helpful for speakers that are softer or louder than normal. Value ranges from 0 to 1 (e.g. \".05\")',\n    '--localfile-port <port>  Specify the port to be used for serving a local file',\n    '--transcode-port <port>  Specify the port to be used for serving a transcoded file',\n    '--torrent-port <port>    Specify the port to be used for serving a torrented file',\n    '--stdin-port <port>      Specify the port to be used for serving a file read from stdin',\n    '--command <key1>,<key2>  Execute key command(s) (where each <key> is one of the keys listed below)',\n    '--exit                   Exit when playback begins or --command completes',\n\n    '--help                   This help screen',\n    '',\n    'Player controls',\n    '',\n    'Key                      Action',\n    'space                    Toggle between play and pause',\n    'm                        Toggle mute',\n    't                        Toggle subtitles',\n    'up                       Volume Up',\n    'down                     Volume Down',\n    'left                     Seek backward',\n    'right                    Seek forward',\n    'n                        Next in playlist',\n    's                        Stop playback',\n    'quit                     Quit',\n    ''\n  ].join('\\n'));\n}\n\nif (opts._.length) {\n  opts.playlist = opts._.map(function(item) {\n    return {\n      path: item\n    };\n  });\n}\n\ndelete opts._;\n\nif (opts.quiet || opts.exit || process.env.DEBUG) {\n  ui.hide();\n}\n\nvar volumeStep = 0.05;\nvar stepOption = opts['volume-step'];\n\nif (stepOption) {\n  var parsed = parseFloat(stepOption);\n\n  if (isNaN(parsed)) {\n    fatalError('invalid --volume-step');\n  }\n\n  if (parsed < 0 || parsed > 1) {\n    fatalError('--volume-step must be between 0 and 1');\n  }\n\n  volumeStep = parsed;\n}\n\ndebug('volume step: %s', volumeStep);\n\nui.showLabels('state');\n\nfunction fatalError(err) {\n  ui.hide(err);\n  debug(err);\n  console.log(chalk.red(err));\n  process.exit();\n}\n\nvar last = function(fn, l) {\n  return function() {\n    var args = Array.prototype.slice.call(arguments);\n    args.push(l);\n    l = fn.apply(null, args);\n    return l;\n  };\n};\n\nvar ctrl = function(err, p, ctx) {\n  if (err) {\n    ui.hide();\n    debug('player error: %o', err);\n    console.log(chalk.red(err));\n    process.exit();\n  }\n\n  var playlist = ctx.options.playlist;\n  var volume;\n  var is_keyboard_interactive = process.stdin.isTTY || false;\n\n  if (is_keyboard_interactive) {\n    keypress(process.stdin);\n    process.stdin.setRawMode(true);\n    process.stdin.resume();\n  }\n\n  ctx.once('closed', function() {\n    ui.hide();\n    console.log(chalk.red('lost connection'));\n    process.exit();\n  });\n\n  // get initial volume\n  p.getVolume(function(err, status) {\n    volume = status;\n  });\n\n  if (!ctx.options.disableTimeline) {\n    p.on('position', function(pos) {\n      ui.setProgress(pos.percent);\n      ui.render();\n    });\n  }\n\n  var seek = debouncedSeeker(function(offset) {\n    if (ctx.options.disableSeek || offset === 0) return;\n    var seconds = Math.max(0, (p.getPosition() / 1000) + offset);\n    debug('seeking to %s', seconds);\n    p.seek(seconds);\n  }, 500);\n\n  var updateTitle = function() {\n    p.getStatus(function(err, status) {\n      if (!status || !status.media ||\n          !status.media.metadata ||\n          !status.media.metadata.title) return;\n\n      var metadata = status.media.metadata;\n      var title;\n      if (metadata.artist) {\n        title = metadata.artist + ' - ' + metadata.title;\n      } else {\n        title = metadata.title;\n      }\n      ui.setLabel('source', 'Source', title);\n      ui.showLabels('state', 'source');\n      ui.render();\n    });\n  };\n\n  var initialSeek = function() {\n    var seconds = unformatTime(ctx.options.seek);\n    debug('seeking to %s', seconds);\n    p.seek(seconds);\n  };\n\n  p.on('playing', updateTitle);\n\n  if (!ctx.options.disableSeek && ctx.options.seek) {\n    p.once('playing', initialSeek);\n  }\n\n  updateTitle();\n\n  var nextInPlaylist = function() {\n    if (ctx.mode !== 'launch') return;\n    if (!playlist.length) return process.exit();\n    p.stop(function() {\n      ui.showLabels('state');\n      debug('loading next in playlist: %o', playlist[0]);\n      p.load(playlist[0], noop);\n      var file = playlist.shift();\n      if (ctx.options.loop) playlist.push(file)\n    });\n  };\n\n  p.on('status', last(function(status, memo) {\n    if (opts.exit && status.playerState == 'PLAYING') process.exit();\n    if (status.playerState !== 'IDLE') return;\n    if (status.idleReason !== 'FINISHED') return;\n    if (memo && memo.playerState === 'IDLE') return;\n    nextInPlaylist();\n    return status;\n  }));\n\n  var keyMappings = {\n\n    // toggle between play / pause\n    space: function() {\n      if (p.currentSession.playerState === 'PLAYING') {\n        p.pause();\n      } else if (p.currentSession.playerState === 'PAUSED') {\n        p.play();\n      }\n    },\n\n    // toggle between mute / unmute\n    m: function() {\n      if(!volume) {\n        return;\n      } else if (volume.muted) {\n        p.unmute(function(err, status) {\n          if (err) return;\n          volume = status;\n        });\n      } else {\n        p.mute(function(err, status) {\n          if (err) return;\n          volume = status;\n        });\n      }\n    },\n\n    t: function() {\n      if (!p.currentSession.media.tracks) { return }\n      var sessionRequestBody = {\n        type: 'EDIT_TRACKS_INFO'\n      }\n      sessionRequestBody.activeTrackIds = p.currentSession.activeTrackIds ? [] : [1];\n      p.sessionRequest(sessionRequestBody);\n    },\n\n    // volume up\n    up: function() {\n      if (!volume || volume.level >= 1) {\n        return;\n      }\n\n      var newVolume = Math.min(volume.level + volumeStep, 1);\n\n      p.setVolume(newVolume, function(err, status) {\n        if (err) {\n          return;\n        }\n\n        debug(\"volume up: %s\", status.level);\n\n        volume = status;\n      });\n    },\n\n    // volume down\n    down: function() {\n      if (!volume || volume.level <= 0) {\n        return;\n      }\n\n      var newVolume = Math.max(volume.level - volumeStep, 0);\n\n      p.setVolume(newVolume, function(err, status) {\n        if (err) {\n          return;\n        }\n\n        debug(\"volume down: %s\", status.level);\n\n        volume = status;\n      });\n    },\n\n    // next item in playlist\n    n: function() {\n      nextInPlaylist();\n    },\n\n    // stop playback\n    s: function() {\n      p.stop();\n    },\n\n    // quit\n    q: function() {\n      process.exit();\n    },\n\n    // Rewind, one \"seekCount\" per press\n    left: function() {\n      seek(-30);\n    },\n\n    // Forward, one \"seekCount\" per press\n    right: function() {\n      seek(30);\n    }\n  };\n\n  if (is_keyboard_interactive) {\n    process.stdin.on('keypress', function(ch, key) {\n      if (key && key.name && keyMappings[key.name]) {\n        debug('key pressed: %s', key.name);\n        keyMappings[key.name]();\n      }\n      if (key && key.ctrl && key.name == 'c') {\n        process.exit();\n      }\n    });\n  }\n\n  if (opts.command) {\n    var commands = opts.command.split(\",\");\n    commands.forEach(function(command) {\n      if (!keyMappings[command]) {\n        fatalError('invalid --command: ' + command);\n      }\n    });\n\n    var index = 0;\n    function run_commands() {\n      if (index < commands.length) {\n        var command = commands[index++];\n        keyMappings[command]();\n        p.getStatus(run_commands);\n      } else {\n        if (opts.exit) {\n          process.exit();\n        }\n      }\n    }\n\n    p.getStatus(run_commands);\n  }\n};\n\nvar capitalize = function(str) {\n  return str.substr(0, 1).toUpperCase() + str.substr(1);\n};\n\nvar logState = (function() {\n  var inter;\n  var dots = circulate(['.', '..', '...', '....']);\n  return function(status) {\n    if (inter) clearInterval(inter);\n    debug('player status: %s', status);\n    inter = setInterval(function() {\n      ui.setLabel('state', 'State', capitalize(status) + dots());\n      ui.render();\n    }, 300);\n  };\n})();\n\nplayer.use(function(ctx, next) {\n  ctx.on('status', logState);\n  next();\n});\n\nplayer.use(stdin);\nplayer.use(directories);\nplayer.use(torrent);\nplayer.use(xspf);\nplayer.use(localfile);\nplayer.use(transcode);\nplayer.use(subtitles);\n\nplayer.use(function(ctx, next) {\n  if (ctx.mode !== 'launch') return next();\n  if (ctx.options.shuffle)\n    ctx.options.playlist = shuffle(ctx.options.playlist);\n  ctx.options = xtend(ctx.options, ctx.options.playlist[0]);\n  var file = ctx.options.playlist.shift();\n  if (ctx.options.loop) ctx.options.playlist.push(file);\n  next();\n});\n\nif (!opts.playlist) {\n  debug('attaching...');\n  player.attach(opts, ctrl);\n} else {\n  debug('launching...');\n  player.launch(opts, ctrl);\n}\n\nprocess.on('SIGINT', function() {\n  process.exit();\n});\n\nprocess.on('exit', function() {\n  ui.hide();\n});\n\nmodule.exports = player;\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/plugins/directories.js":"var fs = require('fs');\nvar diveSync = require('diveSync');\nvar path = require('path');\nvar join = path.join;\nvar extname = path.extname;\nvar debug = require('debug')('castnow:directories');\n\nvar acceptedExtensions = {\n  '.mp3': true,\n  '.mp4': true\n};\n\nfunction filter(filePath, dir) {\n  if (dir) return true;\n  return acceptedExtensions[extname(filePath)];\n}\n\nvar isDir = function(item) {\n  return fs.existsSync(item.path) && fs.lstatSync(item.path).isDirectory();\n};\n\n// check which items in the playlist are\n// actually directories and get all mp4 and\n// mp3 files out of those.\nvar flattenFiles = function(playlist, recursive) {\n  var items = [];\n  playlist.forEach(function(item) {\n    if (isDir(item)) {\n      debug('directory found: %s', item.path);\n      var opts = { recursive: recursive, filter: filter };\n      diveSync(item.path, opts, function(err, file) {\n        if (err) throw err;\n        debug('added file %s', file);\n        items.push({ path: file });\n      });\n      return;\n    }\n    items.push(item);\n  });\n  return items;\n};\n\nvar directories = function(ctx, next) {\n  if (ctx.mode !== 'launch') return next();\n  ctx.options.playlist = flattenFiles(ctx.options.playlist, ctx.options.recursive);\n  next();\n};\n\nmodule.exports = directories;\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/plugins/localfile.js":"var http = require('http');\nvar internalIp = require('internal-ip');\nvar router = require('router');\nvar path = require('path');\nvar serveMp4 = require('../utils/serve-mp4');\nvar debug = require('debug')('castnow:localfile');\nvar fs = require('fs');\n\nvar isFile = function(item) {\n  return fs.existsSync(item.path) && fs.statSync(item.path).isFile();\n};\n\nvar contains = function(arr, cb) {\n  for (var i=0, len=arr.length; i<len; i++) {\n    if (cb(arr[i], i)) return true;\n  }\n  return false;\n};\n\nvar localfile = function(ctx, next) {\n  if (ctx.mode !== 'launch') return next();\n  if (!contains(ctx.options.playlist, isFile)) return next();\n\n  var route = router();\n  var list = ctx.options.playlist.slice(0);\n  var ip = (ctx.options.myip || internalIp());\n  var port = ctx.options['localfile-port'] || 4100;\n\n  ctx.options.playlist = list.map(function(item, idx) {\n    if (!isFile(item)) return item;\n    return {\n      path: 'http://' + ip + ':' + port + '/' + idx,\n      type: 'video/mp4',\n      media: {\n        metadata: {\n          filePath: item.path,\n          title: path.basename(item.path)\n        }\n      }\n    };\n  });\n\n  route.all('/{idx}', function(req, res) {\n    if (!list[req.params.idx]) {\n      res.statusCode = '404';\n      return res.end('page not found');\n    }\n    debug('incoming request serving %s', list[req.params.idx].path);\n    serveMp4(req, res, list[req.params.idx].path);\n  });\n\n  http.createServer(route).listen(port);\n  debug('started webserver on address %s using port %s', ip, port);\n  next();\n\n};\n\nmodule.exports = localfile;\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/utils/serve-mp4.js":"var fs = require('fs');\nvar util = require('util');\nvar rangeParser = require('range-parser');\nvar mime = require('mime');\n\nmodule.exports = function(req, res, filePath) {\n  var stat = fs.statSync(filePath);\n  var total = stat.size;\n  var range = req.headers.range;\n  var type = mime.lookup(filePath);\n\n  res.setHeader('Content-Type', type);\n  res.setHeader('Access-Control-Allow-Origin', '*');\n\n  if (!range) {\n    res.setHeader('Content-Length', total);\n    res.statusCode = 200;\n    return fs.createReadStream(filePath).pipe(res);\n  }\n\n  var part = rangeParser(total, range)[0];\n  var chunksize = (part.end - part.start) + 1;\n  var file = fs.createReadStream(filePath, {start: part.start, end: part.end});\n\n  res.setHeader('Content-Range', 'bytes ' + part.start + '-' + part.end + '/' + total);\n  res.setHeader('Accept-Ranges', 'bytes');\n  res.setHeader('Content-Length', chunksize);\n  res.statusCode = 206;\n\n  return file.pipe(res);\n};\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/plugins/stdin.js":"var http = require('http');\r\nvar internalIp = require('internal-ip');\r\nvar debug = require('debug')('castnow:stdin');\r\n\r\nvar isStdin = function(item) {\r\n    return '-'===item.path;\r\n};\r\n\r\n\r\nvar stdin = function(ctx, next) {\r\n    debug(ctx.options.playlist);\r\n    if (ctx.mode !== 'launch') return next();\r\n    if (ctx.options.playlist.length != 1 || !isStdin(ctx.options.playlist[0])) return next();\r\n\r\n    var port = ctx.options['stdin-port'] || 4104;\r\n    var ip = ctx.options.myip || internalIp();\r\n    ctx.options.playlist[0] = {\r\n        path: 'http://' + ip + ':' + port,\r\n        type: 'video/mp4'\r\n    };\r\n\r\n    http.createServer(function(req, res){\r\n        process.stdin.pipe(res);\r\n    }).listen(port);\r\n\r\n    debug('started webserver for stdin on address %s using port %s', ip, port);\r\n    next();\r\n\r\n};\r\n\r\nmodule.exports = stdin;\r\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/plugins/subtitles.js":"var http = require('http');\nvar fs = require('fs');\nvar path = require('path');\nvar srt2vtt = require('srt2vtt');\nvar internalIp = require('internal-ip');\nvar debug = require('debug')('castnow:subtitles');\nvar got = require('got');\n\nvar srtToVtt = function(options, cb) {\n  var source = options.subtitles;\n  var handler = fs.existsSync(source) ? fs.readFile : got;\n  var encoder = options['bypass-srt-encoding'] ? srt2vtt.raw : srt2vtt;\n  handler(source, function(err, content) {\n    if (err) return cb(err);\n    if (!isSrt(source)) return cb(null, content);\n    encoder(content, function(err, data) {\n      if (err) return cb(err);\n      debug('converted srt to vtt: %s', source);\n      cb(null, data);\n    });\n  });\n};\n\nvar findSubtitles = function(options) {\n  if (!options.playlist[0].media || !options.playlist[0].media.metadata || !options.playlist[0].media.metadata.filePath) return;\n  var videoPath = options.playlist[0].media.metadata.filePath;\n  var videoBaseName = path.basename(videoPath, path.extname(videoPath));\n  var mediaFolder = path.dirname(videoPath);\n  var srtPath = path.join(mediaFolder, videoBaseName + '.srt');\n\n  if (fs.existsSync(srtPath)) {\n    debug('subtitles found in %s', srtPath);\n    return srtPath;\n  }\n\n  return;\n}\n\nvar isSrt = function(path) {\n  return path.substr(-4).toLowerCase() === '.srt';\n};\n\nvar attachSubtitles = function(ctx) {\n  if (!ctx.options.playlist[0].media) {\n    ctx.options.playlist[0].media = {};\n  }\n  ctx.options.playlist[0].media.textTrackStyle = {\n    backgroundColor: '#00000000',\n    foregroundColor: ctx.options['subtitle-color'] || '#FFFF00FF',\n    edgeType: 'OUTLINE',\n    edgeColor: '#000000FF',\n    fontScale: ctx.options['subtitle-scale'],\n    fontStyle: 'NORMAL',\n    fontFamily: 'Droid Sans',\n    fontGenericFamily: 'SANS_SERIF',\n    windowColor: '#AA00FFFF',\n    windowRoundedCornerRadius: 10,\n    windowType: 'NONE'\n  };\n  ctx.options.playlist[0].media.tracks = [{\n    trackId: 1,\n    type: 'TEXT',\n    trackContentId: ctx.options.subtitles,\n    trackContentType: 'text/vtt',\n    name: 'English',\n    language: 'en-US',\n    subtype: 'SUBTITLES'\n  }];\n  ctx.options.playlist[0].activeTrackIds = [1];\n};\n\n/*\n** Handles subtitles, the process is the following:\n**  - Is there a media defined ?\n**  - Is there subtitles in the command line ?\n**  - Is there rightly named subtitles in the the same folder as the video files ?\n**  - Are those subtitles stored locally (.srt) or on a distant server (.vtt) ?\n**  - If they are stored locally we need to convert and serve them via http.\n*/\nvar subtitles = function(ctx, next) {\n  if (ctx.mode !== 'launch') return next();\n  if (ctx.options.playlist.length > 1) return next();\n\n  if (!ctx.options.subtitles) {\n    var autoFindSubs = findSubtitles(ctx.options);\n    if (autoFindSubs) {\n      ctx.options.subtitles = autoFindSubs\n    } else {\n      return next();\n    }\n  }\n\n  var port = ctx.options['subtitle-port'] || 4101;\n  srtToVtt(ctx.options, function(err, data) {\n    if (err) return next();\n    debug('loading subtitles', ctx.options.subtitles);\n    if (err) return next();\n    var ip = ctx.options.myip || internalIp();\n    var addr = 'http://' + ip + ':' + port;\n    http.createServer(function(req, res) {\n      debug('incoming request');\n      res.writeHead(200, {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Length': data.length,\n        'Content-type': 'text/vtt;charset=utf-8'\n      });\n      res.end(data);\n    }).listen(port);\n    debug('started webserver on address %s using port %s', ip, port);\n    ctx.options.subtitles = addr;\n    attachSubtitles(ctx);\n    next();\n  });\n};\n\nmodule.exports = subtitles;\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/plugins/torrent.js":"var readTorrent = require('read-torrent');\nvar peerflix = require('peerflix');\nvar internalIp = require('internal-ip');\nvar grabOpts = require('../utils/grab-opts');\nvar debug = require('debug')('castnow:torrent');\n\nvar torrent = function(ctx, next) {\n  if (ctx.mode !== 'launch') return next();\n  if (ctx.options.playlist.length > 1) return next();\n  var path = ctx.options.playlist[0].path;\n\n  var port = ctx.options['torrent-port'] || 4102;\n\n  if (!/^magnet:/.test(path) &&\n      !/torrent$/.test(path) &&\n      !ctx.options.torrent) return next();\n\n  readTorrent(path, function(err, torrent) {\n    if (err) {\n      debug('error reading torrent: %o', err);\n      return next();\n    }\n    if (!ctx.options['peerflix-port']) ctx.options['peerflix-port'] = port;\n    var engine = peerflix(torrent, grabOpts(ctx.options, 'peerflix-'));\n    var ip = ctx.options.myip || internalIp();\n    engine.server.once('listening', function() {\n      debug('started webserver on address %s using port %s', ip, engine.server.address().port);\n      ctx.options.playlist[0] = {\n        path: 'http://' + ip + ':' + engine.server.address().port,\n        type: 'video/mp4',\n        media: {\n          metadata: {\n            title: engine.server.index.name\n          }\n        }\n      };\n      next();\n    });\n  });\n};\n\nmodule.exports = torrent;\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/utils/grab-opts.js":"module.exports = function(options, prefix) {\n  var opts = {};\n  var len = prefix.length;\n  for (var key in options) {\n    if (key.substr(0, len) === prefix) {\n      opts[key.substr(len)] = options[key];\n    }\n  }\n  return opts;\n};\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/plugins/transcode.js":"var http = require('http');\nvar internalIp = require('internal-ip');\nvar got = require('got');\nvar Transcoder = require('stream-transcoder');\nvar grabOpts = require('../utils/grab-opts');\nvar debug = require('debug')('castnow:transcode');\n\nvar transcode = function(ctx, next) {\n  if (ctx.mode !== 'launch' || !ctx.options.tomp4) return next();\n  if (ctx.options.playlist.length > 1) return next();\n  var orgPath = ctx.options.playlist[0].path;\n  var port = ctx.options['transcode-port'] || 4103;\n  var ip = ctx.options.myip || internalIp();\n  ctx.options.playlist[0] = {\n    path: 'http://' + ip + ':' + port,\n    type: 'video/mp4'\n  };\n  ctx.options.disableTimeline = true;\n  ctx.options.disableSeek = true;\n  http.createServer(function(req, res) {\n    var opts = grabOpts(ctx.options, 'ffmpeg-');\n    debug('incoming request for path %s', orgPath);\n    res.writeHead(200, {\n      'Access-Control-Allow-Origin': '*'\n    });\n    var s = got(orgPath);\n    s.on('error', function(err) {\n      debug('got error: %o', err);\n    });\n\n    var trans = new Transcoder(s)\n      .videoCodec('h264')\n      .format('mp4')\n      .custom('strict', 'experimental')\n      .on('finish', function() {\n        debug('finished transcoding');\n      })\n      .on('error', function(err) {\n        debug('transcoding error: %o', err);\n      });\n    for (var key in opts) {\n      trans.custom(key, opts[key]);\n    }\n\n    var args = trans._compileArguments();\n    args = [ '-i', '-' ].concat(args);\n    args.push('pipe:1');\n    debug('spawning ffmpeg %s', args.join(' '));\n\n    trans.stream().pipe(res);\n  }).listen(port);\n  debug('started webserver on address %s using port %s', ip, port);\n  next();\n};\n\nmodule.exports = transcode;\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/plugins/xspf.js":"var path = require('path');\nvar debug = require('debug')('castnow:localfile');\nvar fs = require('fs');\nvar xspfr = require('xspfr');\n\nvar isFile = function(item) {\n  return fs.existsSync(item.path) && fs.statSync(item.path).isFile();\n}\nvar isXspf = function(item) {\n  return path.extname(item.path) === '.xspf';\n};\n\nvar contains = function(arr, cb) {\n  for (var i=0, len=arr.length; i<len; i++) {\n    if (cb(arr[i], i)) return true;\n  }\n  return false;\n};\n\nvar flatten1 = function(arrayOfArrays) {\n  return [].concat.apply([], arrayOfArrays);\n}\n\nvar localfile = function(ctx, next) {\n  if (ctx.mode !== 'launch') return next();\n  if (!contains(ctx.options.playlist, isXspf)) return next();\n\n  var list = ctx.options.playlist.slice(0);\n\n  Promise.all(list.map(function(item, idx) {\n    if (!isXspf(item)) {\n      return Promise.resolve([item]);\n    }\n\n    if (!isFile(item)) {\n      // TODO\n      throw 'Unsupported external XSPF links';\n    }\n\n    return new Promise(function(resolve, reject) {\n      xspfr(fs.readFileSync(item.path).toString(), function(err, result) {\n        if(err) reject(err)\n\n        resolve(result.map(function(item) {\n          return {\n            path: item.location,\n            media: {\n              metadata: {\n                title: item.title\n              }\n            }\n          }\n        }))\n      })\n    })\n\n  })).then(function(data) {\n    ctx.options.playlist = flatten1(data);\n    next()\n  })\n};\n\nmodule.exports = localfile;\n","/home/travis/build/npmtest/node-npmtest-castnow/node_modules/castnow/utils/unformat-time.js":"module.exports = function (string) {\n  var timeArray = string.split(':'),\n      seconds = 0;\n  // turn hours and minutes into seconds and add them all up\n  if (timeArray.length === 3) {\n    // hours\n    seconds = seconds + (parseInt(timeArray[0]) * 60 * 60);\n    // minutes\n    seconds = seconds + (parseInt(timeArray[1]) * 60);\n    // seconds\n    seconds = seconds + parseInt(timeArray[2]);\n  } else if (timeArray.length === 2) {\n    // minutes\n    seconds = seconds + (parseInt(timeArray[0]) * 60);\n    // seconds\n    seconds = seconds + parseInt(timeArray[1]);\n  }\n  return seconds;\n};\n"}